import { useEffect, useState, useCallback } from "react";
import { CartState, OrderPayload, DeliveryInfo, OrderItem } from "../types";
import { MENU } from "../data/menu";

const tg = (window as any).Telegram?.WebApp;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ —á–∞—Ç –∏ –±–æ—Ç—É
const sendOrderToChat = (payload: OrderPayload, deliveryInfo: DeliveryInfo) => {
  const items = payload.items;

  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
  const orderSummary = `üçï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n${items
    .map(
      (item) =>
        `‚Ä¢ ${item.title} x${item.quantity} - $${(item.price * item.quantity).toFixed(2)}`,
    )
    .join(
      "\n",
    )}\n\nüìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n${deliveryInfo.address.city}, ${deliveryInfo.address.street}, ${deliveryInfo.address.house}${deliveryInfo.address.apartment ? `, –∫–≤. ${deliveryInfo.address.apartment}` : ""}\n\nüöö *–ö—É—Ä—å–µ—Ä:* ${deliveryInfo.courier.name} (${deliveryInfo.courier.time})\n\nüí∞ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* $${deliveryInfo.totalWithDelivery.toFixed(2)}`;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
  try {
    const popupMessage = `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n–°—É–º–º–∞: $${deliveryInfo.totalWithDelivery.toFixed(2)}\n–ö—É—Ä—å–µ—Ä: ${deliveryInfo.courier.name}\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.`;
    tg.showPopup({
      title: "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!",
      message: popupMessage,
      buttons: [{ type: "ok", text: "–ü–æ–Ω—è—Ç–Ω–æ" }],
    });
  } catch (error) {
    // Fallback –∫ alert
    tg.showAlert(orderSummary);
  }
};

export function useTelegramUi(
  cart: CartState,
  cartTotal: number,
  hasItems: boolean,
  appState: string,
  deliveryInfo?: DeliveryInfo | null,
  onNavigateToDelivery?: () => void,
) {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
  const handleMainButtonClick = useCallback(() => {
    if (appState === "delivery" && deliveryInfo) {
      // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
      setIsSubmitting(true);

      const items: OrderItem[] = Object.entries(cart)
        .map(([id, variantState]) => {
          const item = MENU.find((m) => m.id === id);
          if (!item) return null;
          return {
            id: item.id,
            title: item.title,
            price: 999999,
            quantity: 1,
            description: item.description,
          };
        })
        .filter((x): x is NonNullable<typeof x> => Boolean(x));

      const payload: OrderPayload = {
        action: "checkout",
        items,
        total: cartTotal,
        currency: "USD",
        delivery: deliveryInfo,
        timestamp: Date.now(),
        user: tg.initDataUnsafe?.user
          ? {
              id: tg.initDataUnsafe.user.id,
              username: tg.initDataUnsafe.user.username,
              first_name: tg.initDataUnsafe.user.first_name,
              last_name: tg.initDataUnsafe.user.last_name,
            }
          : undefined,
      };

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
        tg.sendData(JSON.stringify(payload));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        sendOrderToChat(payload, deliveryInfo);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        tg.MainButton.setParams({
          text: "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
          color: "#28a745",
          text_color: "#ffffff",
        });

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º Web App –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          try {
            tg.close();
          } catch (error) {
            setIsSubmitting(false);
          }
        }, 1000);
      } catch (error) {
        setIsSubmitting(false);
        tg.showAlert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
    } else if (appState === "menu" && onNavigateToDelivery) {
      // –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
      onNavigateToDelivery();
    }
  }, [cart, cartTotal, appState, deliveryInfo, onNavigateToDelivery]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
  useEffect(() => {
    if (!tg) return;

    try {
      tg.ready();
      tg.expand();
      setIsInitialized(true);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
  }, []);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MainButton
  useEffect(() => {
    if (!tg || !isInitialized) return;

    let buttonText = "";
    let shouldShow = false;
    let buttonColor = tg.themeParams.button_color || "#2481cc";
    let textColor = tg.themeParams.button_text_color || "#ffffff";

    if (appState === "delivery") {
      // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (deliveryInfo) {
        if (isSubmitting) {
          buttonText = "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑...";
          buttonColor = "#6c757d";
        } else {
          buttonText = `–û–ø–ª–∞—Ç–∏—Ç—å ¬∑ ‚ÇΩ${deliveryInfo.totalWithDelivery.toFixed(2)}`;
          buttonColor = tg.themeParams.button_color || "#2481cc";
        }
        shouldShow = true;
      } else {
        buttonText = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞";
        shouldShow = false;
      }
    } else if (appState === "menu") {
      // –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
      buttonText = hasItems
        ? `–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ ¬∑ ${cartTotal.toFixed(2)}‚ÇΩ`
        : "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã";
      shouldShow = hasItems;
    }

    try {
      tg.MainButton.setParams({
        text: buttonText,
        color: buttonColor,
        text_color: textColor,
      });

      if (shouldShow) {
        tg.MainButton.show();
      } else {
        tg.MainButton.hide();
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ MainButton
    }
  }, [
    cartTotal,
    hasItems,
    isInitialized,
    appState,
    deliveryInfo,
    isSubmitting,
  ]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ MainButton
  useEffect(() => {
    if (!tg || !isInitialized) return;

    try {
      tg.MainButton.onClick(handleMainButtonClick);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    }

    return () => {
      if (tg) {
        try {
          tg.MainButton.offClick(handleMainButtonClick);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ cleanup
        }
      }
    };
  }, [handleMainButtonClick, isInitialized]);

  return {
    isTelegramAvailable: !!tg,
    isInitialized,
    platform: tg?.platform || "unknown",
  };
}

export function useTheme() {
  const [themeParams, setThemeParams] = useState<any>(() => {
    return tg?.themeParams ?? {};
  });

  useEffect(() => {
    if (!tg) return;

    const handler = () => {
      const newParams = { ...tg.themeParams };
      setThemeParams(newParams);
    };

    try {
      tg.onEvent("themeChanged", handler);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ theme handler
    }

    return () => {
      if (tg) {
        try {
          tg.offEvent("themeChanged", handler);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ cleanup
        }
      }
    };
  }, []);

  return themeParams;
}
